=============================
Building and installing Kwant
=============================

Prerequisites
=============

Building Kwant requires
 * `Python <http://python.org>`_ 2.6 or 2.7 (Python 3 is not supported yet),
 * `SciPy <http://scipy.org>`_ 0.7.2 or newer,
 * `LAPACK <http://netlib.org/lapack/>`_ and `BLAS <http://netlib.org/blas/>`_,
   (For best performance we recommend the free `OpenBLAS
   <http://xianyi.github.com/OpenBLAS/>`_ or the unfree `MKL
   <http://software.intel.com/en-us/intel-mkl>`_.)
 * Tinyarray, a NumPy-like Python package optimized for very small arrays,
 * An environment which allows to compile Python extensions written in C and
   C++.

The following software is highly recommended though not strictly required:
 * `matplotlib <http://matplotlib.sourceforge.net/>`_, for Kwant's plotting
   module and the tutorial,
 * `MUMPS <http://graal.ens-lyon.fr/MUMPS/>`_, a sparse linear algebra library
   that will in many cases speed up Kwant several times and reduce the memory
   footprint.  (Kwant uses only the sequential, single core version
   of MUMPS.  The advantages due to MUMPS as used by Kwant are thus independent
   of the number of CPU cores of the machine on which Kwant runs.)
 * The `nose <http://nose.readthedocs.org/>`_ testing framework for running the
   tests included with Kwant.

In addition, to build a copy of Kwant that has been checked-out directly from
version control (git), you will also need `Cython <http://cython.org/>`_ 0.17.1
or newer.  You do not need Cython to build Kwant that has been unpacked from a
source .tar.gz-file.


Generic instructions
====================

Please note the `system-specific instructions`_ below.

Kwant can be built and installed following the `usual Python conventions
<http://docs.python.org/install/index.html>`_ by running the following commands
in the root directory of the Kwant distribution. ::

    python setup.py build
    python setup.py install

Depending on your system, you might have to run the second command with
administrator privileges (e.g. prefixing it with ``sudo``).

After installation, tests can be run with::

    python -c 'import kwant; kwant.test()'

The tutorial examples can be found in the directory ``tutorial`` inside the root
directory of the Kwant source distribution.


System-specific instructions
============================

Unix-like systems (Linux)
-------------------------

Kwant should run on all recent Unix-like systems.  The following instructions
have been verified to work on Debian 6 (Squeeze) or newer, and on Ubuntu 12.04
(see :ref:`Note <ubuntu-problem>` below) or newer.  For other distributions step
1 will likely have to be adapted.  If Ubuntu-style ``sudo`` is not available,
the respective command must be run as root.

1. Install the required packages.  On Debian-based systems like Ubuntu this can
   be done by running the command ::

       sudo apt-get install python-dev python-scipy python-matplotlib python-nose g++ gfortran libopenblas-dev liblapack-dev libmumps-scotch-dev

2. Unpack Tinyarray, enter its directory. To build and install, run ::

       python setup.py build
       sudo python setup.py install

3. Inside the Kwant source distribution's root directory run ::

       python setup.py build
       sudo python setup.py install

By default the package will be installed under ``/usr/local``.  You can
change this using the ``--prefix`` option, e.g.::

    sudo python setup.py install --prefix=/opt

If you would like to install Kwant into your home directory only you can use ::

    python setup.py install --home=~

This does not require root privileges.  If you install Kwant in this way
be sure to tell python where to find it.  This can be done by setting the
``PYTHONPATH`` environment variable::

    export PYTHONPATH=$HOME/lib/python

You can make this setting permanent by adding this line to the file
``.bashrc`` (or equivalent) in your home directory.


.. _ubuntu-problem:

Known problem on Ubuntu 12.04 32-bit (i486)
...........................................

With Ubuntu 12.04 running on 32-bit Intel architecture processors the following
error has been observed when running the tests included with Kwant: "Arrays are
not almost equal to 7 decimals".  That problem seems to be due to a bug in the
OpenBLAS package included with that version of Ubuntu.  It can be worked-around
by installing a different BLAS.  Execute the following shell commands::

    sudo apt-get install libblas3gf
    sudo update-alternatives --config libblas.so.3gf

and select the "libblas.so.3gf" alternative when prompted by the second command.


Mac OS X
--------

These instructions were verified in April 2013 under Mac OS X 10.8.2

The instructions also include installing MUMPS for optimal performance
of Kwant. If you choose to omit MUMPS, you can skip over the optional
steps 3 and 5.

1. Install the current version of `MacPorts
   <http://www.macports.org/>`_.  As a prerequisite, you will also
   have to install a current version of Xcode (Apple's developer
   tools). For that, follow the `installation instructions of MacPorts
   <http://www.macports.org/install.php>`_. (Note that you will need an
   account with Apple to download the latest version of Xcode).

2. Install the required packages::

       sudo port install gcc48
       sudo port install python27
       sudo port select --set python python27
       sudo port install py27-numpy py27-scipy py27-cython py27-matplotlib

3. (OPTIONAL) For the best performance, install also the MUMPS library and its
   prerequisites.

   * Download `METIS <http://glaros.dtc.umn.edu/gkhome/metis/metis/overview>`_.
     You need to download version 4.0.3 from the METIS `download page
     <http://glaros.dtc.umn.edu/gkhome/fsroot/sw/metis/OLD>`_ (the newer
     versions have an incompatible interface).

     In order to compile metis, edit the corresponding lines in
     ``Makefile.in`` such that they read::

         CC = gcc-mp-4.8
         COPTIONS = -fPIC
         LDOPTIONS = -fPIC

     Then, execute ``make``.

   * Download `MUMPS <http://graal.ens-lyon.fr/MUMPS/>`_. In order to install
     it, copy ``Make.inc/Makefile.gfortran.SEQ`` to ``Makefile.inc``, and
     edit in it the corresponding lines such they read::

         LMETISDIR = <metisdir>
         LMETIS    = -L$(LMETISDIR) -lmetis

         ORDERINGSF  = -Dpord -Dmetis

         CC = gcc-mp-4.8
         FC = gfortran-mp-4.8
         FL = gfortran-mp-4.8

         LIBBLAS = -lblas

         OPTF = -O -DALLOW_NON_INIT -fPIC
         OPTL = -O -fPIC
         OPTC = -O -fPIC

     where ``<metisdir>`` is the directory of METIS.

     Then, execute ``make all``.

4. Unpack Tinyarray, enter its directory, build and install::

       python setup.py build
       sudo python setup.py install

5. (OPTIONAL) To make Kwant use MUMPS, go to the Kwant directory, and
   edit ``build.conf`` to read::

       [mumps]
       include_dirs = <mumpsdir>/include
       library_dirs = <mumpsdir>/lib <mumpsdir>/libseq <metisdir>/
       libraries = zmumps mumps_common pord metis mpiseq

   where ``<mumpsdir>`` and <metisdir>`` are the driectories of the previously
   installed MUMPS and METIS.

6. Then, build and install Kwant. ::

       python setup.py build
       sudo python setup.py install


Microsoft Windows
-----------------

This describes one way to build a 32 bit (win32) version of Kwant without MUMPS
on Windows using free software only.  These instructions were verified in April
2013 with the following software versions: Windows XP SP3, Python 2.7.4,
scipy-stack 13.4.9, mingw-get-inst-20120426, OpenBLAS 0.2.6.

32-bit Kwant without MUMPS will be limited to rather small systems and will run
significantly slower than a Kwant with MUMPS.  Volunteers who would like to
improve these instructions are welcome.

1. Install the official win32 Python 2.7 distribution from `the official Python
   download page <http://python.org/download/>`_.  See the point "Python 2.7.x
   Windows Installer" there.

2. Install the Python packages required by Kwant (NumPy, SciPy, matplotlib).  An
   easy way to do so is to install the `scipy-stack package
   <http://www.lfd.uci.edu/~gohlke/pythonlibs/#scipy-stack>`_ (win32-py2.7)
   kindly provided by Christoph Gohlke.  Please also note the instructions at
   the top of that page.

3. Install `MinGW <http://mingw.org/wiki/Getting_Started>`_, the "Minimalist GNU
   for Windows" (look for "mingw-get-inst" on that page).  This is a version of
   the GNU Compiler Collection (GCC) for Windows.  Check the boxes for the C,
   C++, and Fortran compilers and the "MSYS Basic System" when asked about which
   components to install.  Follow the instructions on the web page linked above
   (section "Environment Settings") to append ``;C:\MinGW\bin`` to the value of
   the PATH environment variable (or to create it).

4. Make MinGW the default compiler for distutils: Create the file
   ``c:\python27\lib\distutils\distutils.cfg`` (The exact path depends on where
   Python has been installed) with the following contents:

       [build]
       compiler=mingw32

5. Until this `bug in distutils's support for MinGW
   <http://bugs.python.org/issue12641>`_ is fixed, work around it by editing
   ``c:\python27/lib/distutils/cygwinccompiler.py`` and removing all the five
   occurrences of the string ``-mno-cygwin``.

   Now you have a complete environment for compiling Python extensions.  To be
   able to build Kwant, we need to install the required linear algebra
   libraries.

6. Download `OpenBLAS <http://xianyi.github.com/OpenBLAS/>`_ (the download link
   is at the bottom of the page).  Unpack the archive and launch the "MinGW
   shell".  Inside the shell, the command ``mount`` will inform about how the
   "drives" of windows are mounted into the single file system of MSYS.
   Typically, drive C will be /c/.

   Go to the root directory of the OpenBLAS distribution and execute

       mingw-get install msys-wget
       mingw-get install msys-perl
       make USE_THREAD=0

   (If you do not want to forcefully disable threading for OpenBLAS, simply use
   ``make``.)

   This should create a file named like ``libopenblas_nehalem-r0.2.6.lib``
   where the name of the architecture (here: nehalem) and the version might
   differ in your case.  Copy this file as ``openblas.lib`` into the library
   directory of MinGW:

      cp libopenblas_nehalem-r0.2.6.lib /c/MinGW/lib/openblas.lib

7. Unpack Tinyarray, enter its directory. To build and install, run ::

       c:\python27\python setup.py build
       c:\python27\python setup.py install

8. Inside the Kwant source distribution's root directory create a file
   ``build.conf`` with the following contents.::

       [lapack]
       libraries = openblas gfortran

   Finally, build and install Kwant::

       c:\python27\python setup.py build
       c:\python27\python setup.py install


Build configuration
===================

The setup script of Kwant has to know how to link against LAPACK & BLAS, and,
optionally, MUMPS.  Be default it will assume that LAPACK and BLAS can be found
under their usual names.  MUMPS will be not linked against by default, except
on Debian-based systems when the package ``libmumps-scotch-dev`` is installed.

All these settings can be configured by creating/editing the file
``build.conf`` in the root directory of the Kwant distribution.  This
configuration file consists of sections, one for each dependency, led by a
[dependency-name] header and followed by name = value entries.  Possible names
are keyword arguments for ``distutils.core.Extension`` (For a complete list,
see the third table from top of `this document
<http://docs.python.org/distutils/apiref.html>`_).  The corresponding values
are whitespace-separated lists of strings.

The two currently possible sections are [lapack] and [mumps].  The former
configures the linking against LAPACK _AND_ BLAS, the latter against MUMPS
(without LAPACK and BLAS).

Example ``build.conf`` for linking Kwant against a self-compiled MUMPS, `SCOTCH
<http://www.labri.fr/perso/pelegrin/scotch/>`_ and `METIS
<http://glaros.dtc.umn.edu/gkhome/metis/metis/overview>`_::

    [mumps]
    libraries = zmumps mumps_common pord metis esmumps scotch scotcherr mpiseq
        gfortran

Example ``build.conf`` for linking Kwant with Intel MKL.::

    [lapack]
    libraries = mkl_intel_lp64 mkl_sequential mkl_core mkl_def
    library_dirs = /opt/intel/mkl/lib/intel64
    extra_link_args = -Wl,-rpath=/opt/intel/mkl/lib/intel64

The detailed syntax of ``build.conf`` is explained in the `documentation of
Python's configparser module
<http://docs.python.org/3/library/configparser.html#supported-ini-file-structure>`_.


Building the documentation
==========================

To build the documentation, Kwant has to be installed as described above.
Additionally, the `sphinx documentation generator <http://sphinx.pocoo.org/>`_
is required.

HTML documentation can be built by entering the ``doc`` subdirectory of the
Kwant package and executing ``make html``.  PDF documentation is generated by
executing ``make latex`` followed by a ``make all-pdf`` in ``doc/build/latex``.

Because of some quirks of how sphinx works, it might be necessary to execute
``make clean`` between building HTML and PDF documentation.  If this is not
done, sphinx might mistakenly use PNG files for PDF output.


Hacking
=======

To work on Kwant itself it is useful to build it in-place.  This can be done
with the following command ::

    python setup.py build_ext -i

The ``kwant`` subdirectory of the source distribution will be thus turned into
a proper python package which can be imported.  To be able to import Kwant from
within python, one can either work in the root directory of the distribution
(where the subdirectory ``kwant`` is located), or make a (symbolic) link from
somewhere in the Python search path to the the package subdirectory.

Some conventions to keep in mind:

* Write tests for all the important functionality you add.  Be sure not to
  break existing tests.

* Please keep the code consistent by adhering to the prevailing naming and
  formatting conventions.  We generally follow the `"Style Guide for Python
  Code" <http://www.python.org/dev/peps/pep-0008/>`_ For docstrings, we follow
  `NumPy's "Docstring Standard"
  <http://github.com/numpy/numpy/blob/master/doc/HOWTO_DOCUMENT.rst.txt>`_ and
  `Python's "Docstring Conventions"
  <http://www.python.org/dev/peps/pep-0257/>`_.

Several modules are written in `Cython <http://cython.org/>`_ (.pyx file name
extension).  You will need Cython if you want to modify them.
