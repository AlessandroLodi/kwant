Roughly in order of importance.                                     -*-org-*-

* Define a few benchmarks and check performance.  Optimize the code.

* Write a fast tiny array module.
  (If this turns out to be a performance bottleneck.)

* Provide support for calculating and nicely plotting LDOS.
  Make a tutorial example for this.

* Allow attaching lead with further then nearest slice hoppings.
  The most easy way to do this is increasing the period of the lead.

* Optionally show site coordinates when plotting a system.

* Add support for easily adding magnetic field to a system.

* Generalize InfiniteSystem to multiple directions.

* Add support for optimization of lead fundamental domains.

* Write a module to generate "functional" random numbers.
  This is a good starting point:
  http://www.cs.umbc.edu/~olano/papers/GPUTEA.pdf

* Write a RGF solver which uses graph/slicer.

* Implement the C solver interface.

* Wrap TB_SIM as a solver.

* Wrap umfpack or some other sparse linear algebra library with Cython.
  Use it directly in sparse solver.  This will allow to fine-tune the solution
  of sparse systems.
